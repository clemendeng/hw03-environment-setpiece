float random(vec2 ab) {
	float f = (cos(dot(ab ,vec2(21.9898,78.233))) * 43758.5453);
	return fract(f);
}

float noise(in vec2 xy) {
	vec2 ij = floor(xy);
	vec2 uv = xy-ij;
	uv = uv*uv*(3.0-2.0*uv);
	

	float a = random(vec2(ij.x, ij.y ));
	float b = random(vec2(ij.x+1., ij.y));
	float c = random(vec2(ij.x, ij.y+1.));
	float d = random(vec2(ij.x+1., ij.y+1.));
	float k0 = a;
	float k1 = b-a;
	float k2 = c-a;
	float k3 = a-b-c+d;
	return (k0 + k1*uv.x + k2*uv.y + k3*uv.x*uv.y);
}

float getScale(int id) {
  	//insert ids here if using scale
  	if(id == 0) {
    	return 1.f;
  	}
  	return 1.f;
}

mat4 getTransform(int id) {
  	if(id == 0) {
    	mat4 target = mat4(1);
        target[1][1] = 0.4;
        target = translate(0.0, -11.5, 10.0) * target;
    	return target;
    }
}

float getSDF(int id, vec3 p) {
  	if(id == 0) {
    	return sdSphere(p, 8.f);
    }
}

vec3 getBoundDimensions(int id) {
    if(id == 0) {
        return vec3(8, 8, 8);
    }
}

vec3 getColor(int id, vec3 p) {
    vec3 target = vec3(255, 255, 255);
    if(id == 0) {
        //bright part: 251, 244, 200
        target = vec3(153, 185, 172) * 1.f;
    }
    return target / 255.f;
}

vec3 getMinBound(int id) {
    vec3 p = getBoundDimensions(id);

    vec3 ooo = vec3(getTransform(id) * vec4(p * vec3(-1, -1, -1), 1));
    vec3 ooi = vec3(getTransform(id) * vec4(p * vec3(-1, -1, 1), 1));
    vec3 oio = vec3(getTransform(id) * vec4(p * vec3(-1, 1, -1), 1));
    vec3 oii = vec3(getTransform(id) * vec4(p * vec3(-1, 1, 1), 1));
    vec3 ioo = vec3(getTransform(id) * vec4(p * vec3(1, -1, -1), 1));
    vec3 ioi = vec3(getTransform(id) * vec4(p * vec3(1, -1, 1), 1));
    vec3 iio = vec3(getTransform(id) * vec4(p * vec3(1, 1, -1), 1));
    vec3 iii = vec3(getTransform(id) * vec4(p * vec3(1, 1, 1), 1));

    vec3 target;
    for(int i = 0; i < 3; i++) {
        float minI = min(min(min(ooo[i], ooi[i]), min(oio[i], oii[i])), 
                         min(min(ioo[i], ioi[i]), min(iio[i], iii[i])));
        target[i] = minI;
    }
    return target;
}

vec3 getMaxBound(int id) {
    vec3 p = getBoundDimensions(id);

    vec3 ooo = vec3(getTransform(id) * vec4(p * vec3(-1, -1, -1), 1));
    vec3 ooi = vec3(getTransform(id) * vec4(p * vec3(-1, -1, 1), 1));
    vec3 oio = vec3(getTransform(id) * vec4(p * vec3(-1, 1, -1), 1));
    vec3 oii = vec3(getTransform(id) * vec4(p * vec3(-1, 1, 1), 1));
    vec3 ioo = vec3(getTransform(id) * vec4(p * vec3(1, -1, -1), 1));
    vec3 ioi = vec3(getTransform(id) * vec4(p * vec3(1, -1, 1), 1));
    vec3 iio = vec3(getTransform(id) * vec4(p * vec3(1, 1, -1), 1));
    vec3 iii = vec3(getTransform(id) * vec4(p * vec3(1, 1, 1), 1));

    vec3 target;
    for(int i = 0; i < 3; i++) {
        float maxI = max(max(max(ooo[i], ooi[i]), max(oio[i], oii[i])), 
                         max(max(ioo[i], ioi[i]), max(iio[i], iii[i])));
        target[i] = maxI;
    }
    return target;
}

//Returns range of t [min, max] in bounding box, -1000 if doesn't hit
vec2 testObjBox(int id, vec3 origin, vec3 dir) {
    vec3 minp = getMinBound(id);
    vec3 maxp = getMaxBound(id);
    float mins[3];
    float maxes[3];
    for(int i = 0; i < 3; ++i) {
        mins[i] = (minp[i] - origin[i]) / dir[i];
        maxes[i] = (maxp[i] - origin[i]) / dir[i];
        if(mins[i] > maxes[i]) {
            float tmp = mins[i];
            mins[i] = maxes[i];
            maxes[i] = tmp;
        }
    }
    float minT = max(mins[0], max(mins[1], mins[2]));
    float maxT = min(maxes[0], min(maxes[1], maxes[2]));
    if(minT > maxT) {
        return vec2(-1000.f, -1000.f);
    }
    return vec2(minT, maxT);
}

vec3 getNormal(int id, vec3 p) {
    float EPSILON = 0.01;
    return normalize(vec3(
        getSDF(id, vec3(p.x + EPSILON, p.y, p.z)) - getSDF(id, vec3(p.x - EPSILON, p.y, p.z)),
        getSDF(id, vec3(p.x, p.y + EPSILON, p.z)) - getSDF(id, vec3(p.x, p.y - EPSILON, p.z)),
        getSDF(id, vec3(p.x, p.y, p.z + EPSILON)) - getSDF(id, vec3(p.x, p.y, p.z - EPSILON))
    ));
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from -1 to 1)
    vec2 uv = (fragCoord * 2.0 /iResolution.xy) - vec2(1, 1);
    
   	vec3 u_Eye = vec3(0, 0, -10);
    vec3 u_Ref = vec3(0, 0, 0);
    vec3 u_Up = vec3(0, 1, 0);
    float fovy = 45.f;
    float aspect = iResolution.x / iResolution.y;
    float len = length(u_Ref - u_Eye);
    vec3 F = normalize(u_Ref - u_Eye);
    vec3 R = normalize(cross(u_Up, F));
    vec3 V = vec3(u_Up * len * tan(fovy / 2.f));
    vec3 H = vec3(R * len * aspect * tan(fovy / 2.f));
    vec3 world = u_Ref + uv.x * H + uv.y * V;
    //Calculating ray
    vec3 ray_origin = u_Eye;
    vec3 ray_direction = normalize(world - u_Eye);

    //Background
    vec3 col = vec3(17, 15, 39) / 255.f;
    float stars = clamp(pow(noise(fragCoord), 40.f) * 10.f, 0.f, 0.8);
    col = clamp(col + vec3(stars), 0.f, 1.f);

    //Parameters
    int steps = 300;
    float maxT = 200.f;
    const int numPrimitives = 1;
    //-1000 if ray won't hit object, else holds minT value (bounding box)
    float testObjs[numPrimitives] = float[](-1000.f);

    vec3 curr = ray_origin;
    float t = 0.f;
    float dist;
    //What we want
    int minObject = -1;
    vec3 intersection;
    vec3 normal;

    t = 10000.f;
    for(int id = 0; id < numPrimitives; id++) {
        vec2 minMax = testObjBox(id, ray_origin, ray_direction);
        if(minMax[0] > -900.f) {
            //hits bounding box
            if(minMax[0] < t) {
                //closest bounding box hit
                t = minMax[0];
            }
            testObjs[id] = minMax[0];
        }
    }
    curr = ray_origin + t * ray_direction;

    do {
        dist = 10000.f;
        for(int id = 0; id < numPrimitives; id++) {
            //Check if hits object's bounding box
            if(testObjs[id] > -900.f) {
                //Test ray with untransformed object
                vec3 temp = vec3(inverse(getTransform(id)) * vec4(curr, 1));
                float currDist = getSDF(id, temp) * getScale(id);
                if(currDist < dist) {
                    dist = currDist;
                }
                //Intersects object id
                if(currDist < 0.001) {
                    minObject = id;
                    intersection = temp;
                    normal = normalize(mat3(inverse(transpose(getTransform(id)))) * getNormal(id, intersection));
                    intersection = vec3(getTransform(id) * vec4(intersection, 1));
                }
            }
        }
        steps = steps - 1;
        t += dist;
        curr = ray_origin + ray_direction * t;
    } while(dist >= 0.001 && steps > 0 && t < maxT);

    if(minObject > -1) {
        vec3 lightCol = vec3(1, 1, 1);
        vec3 color = getColor(minObject, intersection);
        vec3 lightPos = vec3(3, 0, -5);
        vec3 toLight = normalize(lightPos - intersection);
        float intensity = dot(toLight, normal);
        //ambient + diffuse
        col = vec3(color * 0.5 + lightCol * color * intensity * 0.5);
    }

    // Output to screen
    fragColor = vec4(col,1.0);
}